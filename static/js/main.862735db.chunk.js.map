{"version":3,"sources":["component/header.js","component/notes.js","component/notebody.js","component/notelist.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","header","react_default","a","createElement","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","toggle","Component","Notes","dat","Date","date","getDate","getDay","getFullYear","className","NoteBody","msgBody","setState","NoteList","clicked","bind","assertThisInitialized","notes","notebody","App","notelist","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.862735db.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport {Navbar,NavbarBrand,\n    NavbarToggler} from 'reactstrap'\n\nclass Header extends Component{\n    \n    constructor(props){\n        super(props);\n        this.state ={\n            header: this.props.header\n        };\n    }\n\n    render(){\n        return (\n        <div>\n            <Navbar color=\"light\" light expand=\"md\">\n                <NavbarBrand href=\"/\">Notes</NavbarBrand>\n                <NavbarToggler onClick={this.toggle} />\n            </Navbar>\n        </div>\n        );\n    }\n}\n\nexport default Header;","import React,{Component} from 'react';\n\nclass Notes extends Component{\n\n    constructor(props){\n        super(props);\n        const dat = new Date();\n        this.state = {\n            header: this.props.header,\n            date: dat.getDate() + \" \" + dat.getDay() + \" \" + dat.getFullYear(),\n        }\n    }\n\n    render(){\n        return(\n           <div className=\"note\">\n                <h5>{this.state.header}</h5>\n                <h6>{this.state.date}</h6>\n           </div>\n        );\n    }\n}\n\nexport default Notes;","import React,{Component} from 'react';\n\nclass NoteBody extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            msgBody: null\n        }\n    }\n\n    componentDidMount(){\n        this.setState({\n            msgBody:this.props.msgBody\n        })\n    }\n\n    render(){\n        return(\n            <div>\n                Message body: {this.state.msgBody}\n            </div>\n        );\n    }\n}\n\nexport default NoteBody;","import React,{Component} from 'react';\nimport Notes from './notes';\nimport NoteBody from './notebody';\n\nclass NoteList extends Component{\n\n    constructor(props){\n        super(props);\n        this.state ={\n            msgBody:null\n        }\n        this.clicked = this.clicked.bind(this);\n    }\n\n    clicked() {\n        this.setState({\n            msgBody: \"New Body Message\"\n        })\n    }\n\n    render(){\n        return(\n            <div>\n                <div className=\"notelist\"  onClick={this.clicked}>\n                    <Notes header=\"Note Title 1\"></Notes>\n                    <Notes header=\"Note Title 2\"></Notes>\n                </div>\n                <div>\n                    <NoteBody msgBody={this.state.msgBody}></NoteBody>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default NoteList;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './component/header';\nimport NoteList from './component/notelist';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Header header=\"Notes\"></Header>\n        <div>  \n          <NoteList></NoteList>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}